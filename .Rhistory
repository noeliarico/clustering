panel.border=element_rect(fill=NA, colour="grey40"),
legend.position="bottom", legend.box = "horizontal",
#panel.spacing = unit(0.02, "lines"),
strip.text.y = element_text(size = 8, colour = "white")) +
scale_color_brewer(palette = "Dark2")
# Predicted
ggplot(iters_info, aes(x, y, shape = type)) +
geom_point(aes(color = cluster)) +
facet_grid(distance ~ iter) +#, ncol = 7) +
#scale_color_manual(values = c("red", "black"))
scale_shape_manual(values = c(19, 23)) +
theme_light() +
theme(axis.text.x = element_text(angle = 90),
panel.border=element_rect(fill=NA, colour="grey40"),
legend.position="bottom", legend.box = "horizontal",
#panel.spacing = unit(0.02, "lines"),
strip.text.y = element_text(size = 8, colour = "white")) +
scale_color_brewer(palette = "Dark3")
# Predicted
ggplot(iters_info, aes(x, y, shape = type)) +
geom_point(aes(color = cluster)) +
facet_grid(distance ~ iter) +#, ncol = 7) +
#scale_color_manual(values = c("red", "black"))
scale_shape_manual(values = c(19, 23)) +
theme_light() +
theme(axis.text.x = element_text(angle = 90),
panel.border=element_rect(fill=NA, colour="grey40"),
legend.position="bottom", legend.box = "horizontal",
#panel.spacing = unit(0.02, "lines"),
strip.text.y = element_text(size = 8, colour = "white")) +
scale_color_brewer(palette = "Set1")
# Predicted
ggplot(iters_info, aes(x, y, shape = type)) +
geom_point(aes(color = cluster)) +
facet_grid(distance ~ iter) +#, ncol = 7) +
#scale_color_manual(values = c("red", "black"))
scale_shape_manual(values = c(19, 23)) +
theme_light() +
theme(axis.text.x = element_text(angle = 90),
panel.border=element_rect(fill=NA, colour="grey40"),
legend.position="bottom", legend.box = "horizontal",
#panel.spacing = unit(0.02, "lines"),
strip.text.y = element_text(size = 8, colour = "white")) +
scale_color_brewer(palette = "Set3")
# Predicted
ggplot(iters_info, aes(x, y, shape = type)) +
geom_point(aes(color = cluster)) +
facet_grid(distance ~ iter) +#, ncol = 7) +
#scale_color_manual(values = c("red", "black"))
scale_shape_manual(values = c(19, 23)) +
theme_light() +
theme(axis.text.x = element_text(angle = 90),
panel.border=element_rect(fill=NA, colour="grey40"),
legend.position="bottom", legend.box = "horizontal",
#panel.spacing = unit(0.02, "lines"),
strip.text.y = element_text(size = 8, colour = "white")) +
scale_color_brewer(palette = "Set2")
# Predicted
ggplot(iters_info, aes(x, y, shape = type)) +
geom_point(aes(color = cluster)) +
facet_grid(distance ~ iter) +#, ncol = 7) +
#scale_color_manual(values = c("red", "black"))
scale_shape_manual(values = c(19, 23)) +
theme_light() +
theme(axis.text.x = element_text(angle = 90),
panel.border=element_rect(fill=NA, colour="grey40"),
legend.position="bottom", legend.box = "horizontal",
#panel.spacing = unit(0.02, "lines"),
strip.text.y = element_text(size = 8, colour = "white")) +
scale_color_brewer(n = 5, palette = "RdBu")
# Predicted
ggplot(iters_info, aes(x, y, shape = type)) +
geom_point(aes(color = cluster)) +
facet_grid(distance ~ iter) +#, ncol = 7) +
#scale_color_manual(values = c("red", "black"))
scale_shape_manual(values = c(19, 23)) +
theme_light() +
theme(axis.text.x = element_text(angle = 90),
panel.border=element_rect(fill=NA, colour="grey40"),
legend.position="bottom", legend.box = "horizontal",
#panel.spacing = unit(0.02, "lines"),
strip.text.y = element_text(size = 8, colour = "white")) +
scale_color_brewer("Dark3")
# Predicted
ggplot(iters_info, aes(x, y, shape = type)) +
geom_point(aes(color = cluster)) +
facet_grid(distance ~ iter) +#, ncol = 7) +
#scale_color_manual(values = c("red", "black"))
scale_shape_manual(values = c(19, 23)) +
theme_light() +
theme(axis.text.x = element_text(angle = 90),
panel.border=element_rect(fill=NA, colour="grey40"),
legend.position="bottom", legend.box = "horizontal",
#panel.spacing = unit(0.02, "lines"),
strip.text.y = element_text(size = 8, colour = "white")) +
scale_color_brewer("pal9")
install.packages("devtools")
devtools::install_github("jaredhuling/jcolors")
library(jcolors)
# Predicted
ggplot(iters_info, aes(x, y, shape = type)) +
geom_point(aes(color = cluster)) +
facet_grid(distance ~ iter) +#, ncol = 7) +
#scale_color_manual(values = c("red", "black"))
scale_shape_manual(values = c(19, 23)) +
theme_light() +
theme(axis.text.x = element_text(angle = 90),
panel.border=element_rect(fill=NA, colour="grey40"),
legend.position="bottom", legend.box = "horizontal",
#panel.spacing = unit(0.02, "lines"),
strip.text.y = element_text(size = 8, colour = "white")) +
scale_color_brewer("pal9")
# Predicted
ggplot(iters_info, aes(x, y, shape = type)) +
geom_point(aes(color = cluster)) +
facet_grid(distance ~ iter) +#, ncol = 7) +
#scale_color_manual(values = c("red", "black"))
scale_shape_manual(values = c(19, 23)) +
theme_light() +
theme(axis.text.x = element_text(angle = 90),
panel.border=element_rect(fill=NA, colour="grey40"),
legend.position="bottom", legend.box = "horizontal",
#panel.spacing = unit(0.02, "lines"),
strip.text.y = element_text(size = 8, colour = "white")) +
scale_color_jcolors("pal9")
# Predicted
ggplot(iters_info, aes(x, y, shape = type)) +
geom_point(aes(color = cluster)) +
facet_grid(distance ~ iter) +#, ncol = 7) +
#scale_color_manual(values = c("red", "black"))
scale_shape_manual(values = c(19, 23)) +
theme_light() +
theme(axis.text.x = element_text(angle = 90),
panel.border=element_rect(fill=NA, colour="grey40"),
legend.position="bottom", legend.box = "horizontal",
#panel.spacing = unit(0.02, "lines"),
strip.text.y = element_text(size = 8, colour = "white")) +
scale_color_jcolors("pal3")
# Predicted
ggplot(iters_info, aes(x, y, shape = type)) +
geom_point(aes(color = cluster)) +
facet_grid(distance ~ iter) +#, ncol = 7) +
#scale_color_manual(values = c("red", "black"))
scale_shape_manual(values = c(19, 23)) +
theme_light() +
theme(axis.text.x = element_text(angle = 90),
panel.border=element_rect(fill=NA, colour="grey40"),
legend.position="bottom", legend.box = "horizontal",
#panel.spacing = unit(0.02, "lines"),
strip.text.y = element_text(size = 8, colour = "white")) +
scale_color_jcolors("pal2")
# Predicted
ggplot(iters_info, aes(x, y, shape = type)) +
geom_point(aes(color = cluster)) +
facet_grid(distance ~ iter) +#, ncol = 7) +
#scale_color_manual(values = c("red", "black"))
scale_shape_manual(values = c(19, 23)) +
theme_light() +
theme(axis.text.x = element_text(angle = 90),
panel.border=element_rect(fill=NA, colour="grey40"),
legend.position="bottom", legend.box = "horizontal",
#panel.spacing = unit(0.02, "lines"),
strip.text.y = element_text(size = 8, colour = "white")) +
scale_color_jcolors("rainbow")
# Predicted
ggplot(iters_info, aes(x, y, shape = type)) +
geom_point(aes(color = cluster)) +
facet_grid(distance ~ iter) +#, ncol = 7) +
#scale_color_manual(values = c("red", "black"))
scale_shape_manual(values = c(19, 23)) +
theme_light() +
theme(axis.text.x = element_text(angle = 90),
panel.border=element_rect(fill=NA, colour="grey40"),
legend.position="bottom", legend.box = "horizontal",
#panel.spacing = unit(0.02, "lines"),
strip.text.y = element_text(size = 8, colour = "white")) +
scale_color_jcolors("pal3")
# Predicted
ggplot(iters_info, aes(x, y, shape = type)) +
geom_point(aes(color = cluster)) +
facet_grid(distance ~ iter) +#, ncol = 7) +
#scale_color_manual(values = c("red", "black"))
scale_shape_manual(values = c(19, 23)) +
theme_light() +
theme(axis.text.x = element_text(angle = 90),
panel.border=element_rect(fill=NA, colour="grey40"),
legend.position="bottom", legend.box = "horizontal",
#panel.spacing = unit(0.02, "lines"),
strip.text.y = element_text(size = 8, colour = "white")) +
scale_color_jcolors("pal3") +
scale_x_continuous(expand = c(-0.2, 1.2))
# Predicted
ggplot(iters_info, aes(x, y, shape = type)) +
geom_point(aes(color = cluster)) +
facet_grid(distance ~ iter) +#, ncol = 7) +
#scale_color_manual(values = c("red", "black"))
scale_shape_manual(values = c(19, 23)) +
theme_light() +
theme(axis.text.x = element_text(angle = 90),
panel.border=element_rect(fill=NA, colour="grey40"),
legend.position="bottom", legend.box = "horizontal",
#panel.spacing = unit(0.02, "lines"),
strip.text.y = element_text(size = 8, colour = "white")) +
scale_color_jcolors("pal3") +
scale_y_continuous(expand = c(-0.2, 1.2))
# Predicted
ggplot(iters_info, aes(x, y, shape = type)) +
geom_point(aes(color = cluster)) +
facet_grid(distance ~ iter) +#, ncol = 7) +
#scale_color_manual(values = c("red", "black"))
scale_shape_manual(values = c(19, 23)) +
theme_light() +
theme(axis.text.x = element_text(angle = 90),
panel.border=element_rect(fill=NA, colour="grey40"),
legend.position="bottom", legend.box = "horizontal",
#panel.spacing = unit(0.02, "lines"),
strip.text.y = element_text(size = 8, colour = "white")) +
scale_color_jcolors("pal3", ncol = 5) +
scale_y_continuous(expand = c(-0.2, 1.2), breaks = c(0, 0.5, 1))
# Predicted
ggplot(iters_info, aes(x, y, shape = type)) +
geom_point(aes(color = cluster)) +
facet_grid(distance ~ iter) +#, ncol = 7) +
#scale_color_manual(values = c("red", "black"))
scale_shape_manual(values = c(19, 23)) +
theme_light() +
theme(axis.text.x = element_text(angle = 90),
panel.border=element_rect(fill=NA, colour="grey40"),
legend.position="bottom", legend.box = "horizontal",
#panel.spacing = unit(0.02, "lines"),
strip.text.y = element_text(size = 8, colour = "white")) +
scale_color_jcolors("pal3") +
scale_y_continuous(expand = c(-0.2, 1.2), breaks = c(0, 0.5, 1))
# Predicted
ggplot(iters_info, aes(x, y, shape = type)) +
geom_point(aes(color = cluster)) +
facet_grid(distance ~ iter) +#, ncol = 7) +
#scale_color_manual(values = c("red", "black"))
scale_shape_manual(values = c(19, 23)) +
theme_light() +
theme(axis.text.x = element_text(angle = 90),
panel.border=element_rect(fill=NA, colour="grey40"),
legend.position="bottom", legend.box = "horizontal",
#panel.spacing = unit(0.02, "lines"),
strip.text.y = element_text(size = 8, colour = "white")) +
scale_color_jcolors("pal3") +
scale_x_continuous(expand = c(-0.05, 1.05), breaks = c(0, 0.5, 1)) +
scale_y_continuous(expand = c(-0.05, 1.05), breaks = c(0, 0.5, 1))
source('~/Desktop/Github/clustering/read_rout.R')
# Predicted
ggplot(iters_info, aes(x, y, shape = type)) +
geom_point(aes(color = cluster)) +
facet_grid(distance ~ iter) +#, ncol = 7) +
#scale_color_manual(values = c("red", "black"))
scale_shape_manual(values = c(19, 23)) +
theme_light() +
theme(axis.text.x = element_text(angle = 90),
panel.border=element_rect(fill=NA, colour="grey40"),
legend.position="bottom", legend.box = "horizontal",
#panel.spacing = unit(0.02, "lines"),
strip.text.y = element_text(size = 8, colour = "white")) +
scale_color_jcolors("pal3") +
scale_x_continuous(expand = c(0, 1), breaks = c(0, 0.5, 1)) +
scale_y_continuous(expand = c(-0.05, 1.05), breaks = c(0, 0.5, 1))
?scale_x_continuous
# Predicted
ggplot(iters_info, aes(x, y, shape = type)) +
geom_point(aes(color = cluster)) +
facet_grid(distance ~ iter) +#, ncol = 7) +
#scale_color_manual(values = c("red", "black"))
scale_shape_manual(values = c(19, 23)) +
theme_light() +
theme(axis.text.x = element_text(angle = 90),
panel.border=element_rect(fill=NA, colour="grey40"),
legend.position="bottom", legend.box = "horizontal",
#panel.spacing = unit(0.02, "lines"),
strip.text.y = element_text(size = 8, colour = "white")) +
scale_color_jcolors("pal3") +
scale_x_continuous(expand = 0.1, breaks = c(0, 0.5, 1)) +
scale_y_continuous(expand = 0.1, breaks = c(0, 0.5, 1))
# Predicted
ggplot(iters_info, aes(x, y, shape = type)) +
geom_point(aes(color = cluster)) +
facet_grid(distance ~ iter) +#, ncol = 7) +
#scale_color_manual(values = c("red", "black"))
scale_shape_manual(values = c(19, 23)) +
theme_light() +
theme(axis.text.x = element_text(angle = 90),
panel.border=element_rect(fill=NA, colour="grey40"),
legend.position="bottom", legend.box = "horizontal",
#panel.spacing = unit(0.02, "lines"),
strip.text.y = element_text(size = 8, colour = "white")) +
scale_color_jcolors("pal3") +
scale_x_continuous(expand = c(0.1, 0.1), breaks = c(0, 0.5, 1)) +
scale_y_continuous(expand = c(0.1, 0.1), breaks = c(0, 0.5, 1))
# Predicted
ggplot(iters_info, aes(x, y, shape = type)) +
geom_point(aes(color = cluster)) +
facet_grid(distance ~ iter) +#, ncol = 7) +
#scale_color_manual(values = c("red", "black"))
scale_shape_manual(values = c(19, 23)) +
theme_light() +
theme(axis.text.x = element_text(angle = 90),
panel.border=element_rect(fill=NA, colour="grey40"),
legend.position="bottom", legend.box = "horizontal",
#panel.spacing = unit(0.02, "lines"),
strip.text.y = element_text(size = 8, colour = "white")) +
scale_color_jcolors("pal3") +
scale_x_continuous(expand = c(0.1, 0.1), breaks = c(0, 0.5, 1)) +
scale_y_continuous(expand = c(0.1, 0.1), breaks = c(0, 0.5, 1)) +
labs(x = NULL, y = NULL)
source('~/Desktop/Github/clustering/read_rout.R')
# Predicted
ggplot(iters_info, aes(x, y, shape = type)) +
geom_point(aes(color = cluster)) +
facet_grid(distance ~ iter) +#, ncol = 7) +
#scale_color_manual(values = c("red", "black"))
scale_shape_manual(values = c(19, 23)) +
theme_light() +
theme(axis.text.x = element_text(angle = 90),
panel.border=element_rect(fill=NA, colour="grey40"),
legend.position="bottom", legend.box = "horizontal",
#panel.spacing = unit(0.02, "lines"),
strip.text.y = element_text(size = 7, colour = "white")) +
scale_color_jcolors("pal3") +
scale_x_continuous(expand = c(0.1, 0.1), breaks = c(0, 0.5, 1)) +
scale_y_continuous(expand = c(0.1, 0.1), breaks = c(0, 0.5, 1)) +
labs(x = NULL, y = NULL)
rankingsOfErrors_borda
errors
rankingsOfErrors
errors
rankingsOfErrors <- sapply(errors, ranking)
rankingsOfErrors
errors
bind_rows(errors)
#for(n in 1:5000) {
# Clustering with rkmeans
set.seed(the_seed)
out_points <- train_rkmeans(points, 5, 5)
source('~/Desktop/Github/clustering/example.R')
errors
unlist(errors)
sapply(errors, as.numeric)
out_points
errors
sapply(errors, as.numeric)
out <- sapply(errors, as.numeric)
colnames(out) <- paste0("error_d", colnames(out))
rownames(out) <- paste0("method_d", rownames(out))
rownames(out) <- paste0("method_d", distances)
out
errors
errors <- sorted_errors_by_dataset(errors)
errors
errors <- calculate_errors(out_points)
errors
out
out_points <- train_rkmeans(points, 5, 5)
out_points
errors <- calculate_errors(out_points)
errors
errors
out
out <- sapply(errors, as.numeric)
out
out_points <- train_rkmeans(points, 5, 5)
out_points
errors <- calculate_errors(out_points)
errors <- sorted_errors_by_dataset(errors)
errors
rankingsOfErrors <- lapply(errors, ranking)
rankingsOfErrors <- profile_of_rankings(Reduce(bind_rows, rankingsOfErrors))
rankingsOfErrors_borda <- borda_count(rankingsOfErrors)
rankingsOfErrors_borda
rankingsOfErrors
rankingsOfErrors_borda
errors
rsconnect::setAccountInfo(name='noeliarico',
token='7A8A8E59EFF6F770FAFA4DCE52AC421F',
secret='<SECRET>')
install.packages("rsconnect")
rsconnect::setAccountInfo(name='noeliarico',
token='7A8A8E59EFF6F770FAFA4DCE52AC421F',
secret='<SECRET>')
rsconnect::setAccountInfo(name='noeliarico', token='7A8A8E59EFF6F770FAFA4DCE52AC421F', secret='bVEcWxZxD+pfXES29lSv0WV6tHD51gdRaW3MwTeF')
runApp('clustering_web')
runApp('clustering_web')
length(datasets)
install.packages("shinyjs")
save.image(file = "clustering_web/clustering.RData")
runApp('clustering_web')
?kmeans
# Compare the results by number of features
ggplot(rankingsOfErrors_toplot, aes(position, dataset)) +
geom_tile(fill = "white", color = "black") +
geom_jitter(aes(color = method, shape = method), height = 0) +
scale_color_manual(values = c("red", rep("black", 13))) +
scale_shape_manual(values = 0:14)  +
facet_grid(nfeatures ~ ., scales = "free", space = "free")
names(datasets)
datasets[["data_k8f2"]]
distances
errors
rankingsOfErrors_borda
rankingsOfErrors_borda
# For each dataset, creates a matrix where the rows represent the
# distance measure use for the clustering process
# The row shows the error calculated with each of the distance measures for
# every version of the clustering
results_dataset_errors <- lapply(datasets_results, calculate_errors)
names(results_dataset_errors) <- names(datasets)
results_dataset_errors_sorted <- lapply(dataset_errors, sorted_errors_by_dataset)
# Create ranking
(rankingsOfErrors <- lapply(results_dataset_errors_sorted, function(x) lapply(x, ranking)))
rankingsOfErrors <- lapply(rankingsOfErrors, function(x) Reduce(bind_rows, x))
rankingsOfErrors <- lapply(rankingsOfErrors, profile_of_rankings)
rankingsOfErrors_borda <- lapply(rankingsOfErrors, borda_count)
rankingsOfErrors_toplot <- as.data.frame(rankingsOfErrors_borda)
rankingsOfErrors_toplot <- rankingsOfErrors_toplot %>% rownames_to_column(var = "method")
rankingsOfErrors_toplot <- rankingsOfErrors_toplot %>% pivot_longer(-method, names_to = "dataset", values_to = "position")
ks <- as.numeric(str_match(rankingsOfErrors_toplot$dataset, "data_k(.*?)f.")[,2])
fs <- as.numeric(str_remove(rankingsOfErrors_toplot$dataset, "data_k.+f"))
rankingsOfErrors_toplot <- rankingsOfErrors_toplot %>% mutate(k = ks, nfeatures = fs)
rankingsOfErrors_toplot <- rankingsOfErrors_toplot %>% transmute_all(as.factor)
# Compare the results by k
ggplot(rankingsOfErrors_toplot, aes(position, dataset)) +
geom_tile(fill = "white", color = "black") +
geom_jitter(aes(color = method, shape = method), height = 0) +
scale_color_manual(values = c("red", rep("black", 13))) +
scale_shape_manual(values = 0:14)  +
facet_grid(k ~ ., scales = "free", space = "free")
source('~/Desktop/Github/clustering/k8f2.R')
rankingsOfErrors_borda
source('~/Desktop/Github/clustering/k8f2.R')
rankingsOfErrors_borda
source('~/Desktop/Github/clustering/k8f2.R')
rankingsOfErrors_borda
datasets_results
source('~/Desktop/Github/clustering/04.results/results_analysis.R')
# Compare the results by k
ggplot(rankingsOfErrors_toplot, aes(position, dataset)) +
geom_tile(fill = "white", color = "black") +
geom_jitter(aes(color = method, shape = method), height = 0) +
scale_color_manual(values = c("red", rep("black", 13))) +
scale_shape_manual(values = 0:14)  +
facet_grid(k ~ ., scales = "free", space = "free")
# Compare the results by k
ggplot(rankingsOfErrors_toplot, aes(position, dataset)) +
geom_tile(fill = "white", color = "black") +
#geom_jitter(aes(color = method, shape = method), height = 0) +
geom_point(aes(color = method, shape = method)) +
scale_color_manual(values = c("red", rep("black", 13))) +
scale_shape_manual(values = 0:14)  +
facet_grid(k ~ ., scales = "free", space = "free")
rankingsOfErrors
rankingsOfErrors_borda
rankingsOfErrors_borda
source('~/Desktop/Github/clustering/read_rout.R')
iters_info
# Predicted
ggplot(iters_info %>% filter(distance != "gower"), aes(x, y, shape = type)) +
geom_point(aes(color = cluster)) +
facet_grid(distance ~ iter) +#, ncol = 7) +
#scale_color_manual(values = c("red", "black"))
scale_shape_manual(values = c(19, 23)) +
theme_light() +
theme(axis.text.x = element_text(angle = 90),
panel.border=element_rect(fill=NA, colour="grey40"),
legend.position="bottom", legend.box = "horizontal",
#panel.spacing = unit(0.02, "lines"),
strip.text.y = element_text(size = 7, colour = "white")) +
scale_color_jcolors("pal3") +
scale_x_continuous(expand = c(0.1, 0.1), breaks = c(0, 0.5, 1)) +
scale_y_continuous(expand = c(0.1, 0.1), breaks = c(0, 0.5, 1)) +
labs(x = NULL, y = NULL)
points
install.packages(xtable)
install.packages("xtable")
install.packages("xtable")
library(xtable)
xtable(points %>% select(x, y), caption = "Points of the dataset")
print(xtable(points %>% select(x, y), caption = "Points of the dataset"), rownames = FALSE)
print(xtable(points %>% select(x, y), caption = "Points of the dataset"), rows = FALSE)
print(xtable(points %>% select(x, y), caption = "Points of the dataset"), row_number = FALSE)
print(xtable(points %>% select(x, y), caption = "Points of the dataset"), include.rownames =  = FALSE)
print(xtable(points %>% select(x, y), caption = "Points of the dataset"), include.rownames = FALSE)
print(xtable(t(points %>% select(x, y)), caption = "Points of the dataset"), include.rownames = FALSE)
source('~/Desktop/Github/clustering/read_rout.R')
source('~/Desktop/Github/clustering/example.R')
errors
errors <- calculate_errors(out_points)
errors
errors
errors <- sorted_errors_by_dataset(errors)
errors
rankingsOfErrors
errors
errors <- calculate_errors(out_points)
xtable(errors, digits = 4, caption = "Points of the dataset")
xtable(errors, digits = 2, caption = "Points of the dataset")
xtable(errors, digits = 3, caption = "Points of the dataset")
xtable(t(errors), digits = 3, caption = "Points of the dataset")
print(as.list(.GlobalEnv))
print(names(as.list(.GlobalEnv)))
runApp('clustering_web')
runApp('clustering_web')
rankingsOfErrors_borda
check
check <- "Enhorabuena, el proyecto ha sido cargado correctamente 07/20""
""
check <- "Enhorabuena, el proyecto ha sido cargado correctamente 07/20"
