for(i in 1:35) {
results <- train_rkmeans(datasets[[i]], number_of_clusters[i])
datasets_results[[i]] <- results
}
datasets_results[[1]]
# Input: results of one datasets, taken from a single
# element of the list datasets_results
# Calculates for each distance that was used for training the dataset the
# errors computed which each of the distance
calculate_errors <- function(results_of_one_dataset) {
errors_one_dataset <- sapply(results_of_one_dataset, function(x) x$tot.withinss)
rownames(errors_one_dataset) <- c(paste0("errord_", selected_distances))
errors_one_dataset
#colSums(errorsd1)
}
errors <- lapply(datasets_results, calculate_errors)
selected_distances <- distances[1:13]
errors <- lapply(datasets_results, calculate_errors)
datasets_results
datasets_results[[1]]
datasets_results[[1]][1]
sapply(datasets_results[[1]], function(x) x$tot.withinss)
selected_distances
# Input: results of one datasets, taken from a single
# element of the list datasets_results
# Calculates for each distance that was used for training the dataset the
# errors computed which each of the distance
calculate_errors <- function(results_of_one_dataset) {
errors_one_dataset <- sapply(results_of_one_dataset, function(x) x$tot.withinss)
rownames(errors_one_dataset) <- c(paste0("errord_", selected_distances))
errors_one_dataset
#colSums(errorsd1)
}
errors <- lapply(datasets_results[[1]], calculate_errors)
lapply(datasets_results, calculate_errors)
sapply(datasets_results[[1]], function(x) x$tot.withinss)
sapply(datasets_results, function(x) x$tot.withinss)
lapply(datasets_results, function(x) x$tot.withinss)
dapply(datasets_results, function(x) x$tot.withinss)
sapply(datasets_results, function(x) x$tot.withinss)
sapply(datasets_results[[1]], function(x) x$tot.withinss)
lapply(datasets_results[[1]], function(x) x$tot.withinss)
sapply(datasets_results[[1]], function(x) x$tot.withinss)
c(paste0("errord_", selected_distances))
rownames(errors_one_dataset)
lapply(datasets_results, print)
errors <- lapply(datasets_results, calculate_errors)
# Input: results of one datasets, taken from a single
# element of the list datasets_results
# Calculates for each distance that was used for training the dataset the
# errors computed which each of the distance
calculate_errors <- function(results_of_one_dataset) {
errors_one_dataset <- sapply(results_of_one_dataset, function(x) x$tot.withinss)
print(errors_one_dataset)
rownames(errors_one_dataset) <- c(paste0("errord_", selected_distances))
errors_one_dataset
#colSums(errorsd1)
}
errors <- lapply(datasets_results, calculate_errors)
rownames(errors_one_dataset)
errors_one_dataset <- sapply(datasets_results[[1]], function(x) x$tot.withinss)
rownames(errors_one_dataset)
row.names(errors_one_dataset)
class(errors_one_dataset)
rownames(errors_one_dataset) <- 1:13
errors_one_dataset
rownames(errors_one_dataset) <- "noelia"
rownames(errors_one_dataset) <- rep("noelia", 13)
rownames(errors_one_dataset)
# Input: results of one datasets, taken from a single
# element of the list datasets_results
# Calculates for each distance that was used for training the dataset the
# errors computed which each of the distance
calculate_errors <- function(results_of_one_dataset) {
errors_one_dataset <- sapply(results_of_one_dataset, function(x) x$tot.withinss)
print(errors_one_dataset)
rownames(errors_one_dataset) <- c(paste0("error_d", selected_distances))
errors_one_dataset
#colSums(errorsd1)
}
errors <- lapply(datasets_results, calculate_errors)
## modelled on print methods in the cluster package
print.rkmeans <- function(x, ...)
{
#cat("K-means clustering with ", length(x$size), " clusters of sizes ",
#   paste(x$size, collapse = ", "), "\n", sep = "")
#cat("\nCluster means:\n")
#print(x$centers, ...)
#cat("\nClustering vector:\n")
#print(x$cluster, ...)
#cat("\nWithin cluster sum of squares by cluster:\n")
print(x$withinss, ...)
# ratio <- sprintf(" (between_SS / total_SS = %5.1f %%)\n",
#                  100 * x$betweenss/x$totss)
# cat(sub(".", getOption("OutDec"), ratio, fixed = TRUE),
#     "Available components:\n", sep = "\n")
# print(names(x))
# if(!is.null(x$ifault) && x$ifault == 2L)
#   cat("Warning: did *not* converge in specified number of iterations\n")
# invisible(x)
}
datasets[[1]]
datasets_results[[1]]
class(datasets_results[[1]])
class(datasets_results[[1]][1])
class(datasets_results[[1]][[1]])
# Number of clusters of each dataset
number_of_clusters <- unlist(lapply(datasets, function(x) x %>% distinct(cluster) %>% nrow()))
# Empty list to store the results for each dataset in the list "datasets"
datasets_results <- vector(mode = "list", length = length(datasets))
source('~/Desktop/Github/clustering/02.method/rkmeans/rkmeans.R')
for(i in 1:35) {
results <- train_rkmeans(datasets[[i]], number_of_clusters[i])
datasets_results[[i]] <- results
}
length(datasets)
source('~/Desktop/Github/clustering/training_datasets.R')
saveRDS("clustering_web/datasets_results_v1.rds")
saveRDS(datasets_results, "clustering_web/datasets_results_v1.rds")
errors <- lapply(datasets_results, calculate_errors)
datasets_results[[1]]
# Input: results of one datasets, taken from a single
# element of the list datasets_results
# Calculates for each distance that was used for training the dataset the
# errors computed which each of the distance
calculate_errors <- function(results_of_one_dataset) {
errors_one_dataset <- sapply(results_of_one_dataset, function(x) x$tot.withinss)
rownames(errors_one_dataset) <- c(paste0("error_d", selected_distances))
errors_one_dataset
#colSums(errorsd1)
}
dataset_errors <- lapply(datasets_results, calculate_errors)
dataset_errors
names(dataset_errors) <- names(datasets)
dataset_errors
# Input: matrix of errors obtained after applying "calculate_errors"
#
sorted_errors_by_dataset <- function(errors_of_one_dataset) {
ranking_of_errors <- lapply(1:nrow(errors_of_one_dataset), function(x) {
sort(errors_of_one_dataset[x,])
})
names(ranking_of_errors) <- distances[1:13]
ranking_of_errors
}
# Input: matrix of errors obtained after applying "calculate_errors"
#
sorted_errors_by_dataset <- function(errors_of_one_dataset) {
ranking_of_errors <- lapply(1:nrow(errors_of_one_dataset), function(x) {
sort(errors_of_one_dataset[x,])
})
names(ranking_of_errors) <- selected_distances
ranking_of_errors
}
# For each dataset, creates a matrix where the rows represent the
# distance measure use for the clustering process
# The row shows the error calculated with each of the distance measures for
# every version of the clustering
results_dataset_errors <- lapply(datasets_results, calculate_errors)
names(dataset_errors) <- names(datasets)
results_dataset_errors_sorted <- lapply(dataset_errors, sorted_errors_by_dataset)
names(results_dataset_errors) <- names(datasets)
results_dataset_errors_sorted <- lapply(dataset_errors, sorted_errors_by_dataset)
results_dataset_errors_sorted
# Create ranking
(rankingsOfErrors <- lapply(sorted_errors_by_dataset, function(x) lapply(x, ranking)))
# Create ranking
(rankingsOfErrors <- lapply(sorted_errors_by_dataset, function(x) lapply(x, ranking)))
# Create ranking
(rankingsOfErrors <- lapply(results_dataset_errors_sorted, function(x) lapply(x, ranking)))
rankingsOfErrors
rankingsOfErrors_borda <- lapply(rankingsOfErrors, borda_count)
# Create ranking
(rankingsOfErrors <- lapply(results_dataset_errors_sorted, function(x) lapply(x, ranking)))
rankingsOfErrors <- lapply(rankingsOfErrors, function(x) Reduce(bind_rows, x))
rankingsOfErrors <- lapply(rankingsOfErrors, profile_of_rankings)
rankingsOfErrors_borda <- lapply(rankingsOfErrors, borda_count)
rankingsOfErrors_borda
as.data.frame(rankingsOfErrors_borda)
rankingsOfErrors_toplot <- as.data.frame(rankingsOfErrors_borda)
rankingsOfErrors_toplot
rankingsOfErrors_toplot %>% rownames_to_column()
rankingsOfErrors_borda
rankingsOfErrors_toplot %>% rownames_to_column(error)
?rownames_to_column
rankingsOfErrors_toplot %>% rownames_to_column(var = "error")
rankingsOfErrors_toplot <- rankingsOfErrors_toplot %>% rownames_to_column(var = "error")
rankingsOfErrors_toplot
pivot_longer(-error, names_to = "dataset", values_to = "position")
rankingsOfErrors_toplot %>% pivot_longer(-error, names_to = "dataset", values_to = "position")
rankingsOfErrors_toplot <- as.data.frame(rankingsOfErrors_borda)
rankingsOfErrors_toplot <- rankingsOfErrors_toplot %>% rownames_to_column(var = "error")
rankingsOfErrors_toplot <-rankingsOfErrors_toplot %>% pivot_longer(-error, names_to = "dataset", values_to = "position")
as.data.frame(rankingsOfErrors_toplot)
sapply(as.data.frame(rankingsOfErrors_toplot), class)
lapply(rankingsOfErrors, as.factor)
as_tibble(lapply(rankingsOfErrors, as.factor))
rankingsOfErrors %>% type.convert()
rankingsOfErrors %>% mutate_all(as.factor())
rankingsOfErrors %>% mutate_all(as.factor)
?mutate_all
rankingsOfErrors %>% transmute_all(as.factor)
%>% transmute_all(as.factor)
rankingsOfErrors_toplot
rankingsOfErrors_toplot %>% transmute_all(as.factor)
rankingsOfErrors_toplot <- rankingsOfErrors_toplot %>% transmute_all(as.factor)
ggplot(rrankingsOfErrors_toplot, aes(datasets, position)) + geom_point()
ggplot(rankingsOfErrors_toplot, aes(datasets, position)) + geom_point()
ggplot(rankingsOfErrors_toplot, aes(dataset, position)) + geom_point()
ggplot(rankingsOfErrors_toplot, aes(position, 1:10, color = error)) + geom_point()
ggplot(rankingsOfErrors_toplot, aes(x=factor(Month,levels=1:12), position, color = error)) + geom_point()
ggplot(rankingsOfErrors_toplot, aes(x=factor(1:12,levels=1:12), position, color = error)) + geom_point()
ggplot(rankingsOfErrors_toplot, aes(x=factor(1:12,levels=1:12), position)) + geom_point()
ggplot(rankingsOfErrors_toplot, aes(position, dataset)) + geom_point() + scale_x_discrete('Month', breaks=factor(1:12), drop=FALSE)
rankingsOfErrors_toplot
ggplot(rankingsOfErrors_toplot, aes(position, dataset, color = error, shape = error) + geom_point() #+ scale_x_discrete('Month', breaks=factor(1:12), drop=FALSE)
ggplot(rankingsOfErrors_toplot, aes(position, dataset, color = error, shape = error)) + geom_point() #+ scale_x_discrete('Month', breaks=factor(1:12), drop=FALSE)
ggplot(rankingsOfErrors_toplot, aes(position, dataset, color = error, shape = error)) +
geom_jitter() #+ scale_x_discrete('Month', breaks=factor(1:12), drop=FALSE)
ggplot(rankingsOfErrors_toplot, aes(position, dataset, color = "method", shape = "method")) +
geom_jitter() +
scale_color_continuous("red")
ggplot(rankingsOfErrors_toplot, aes(position, dataset, color = "method", shape = "method")) +
geom_jitter() +
scale_color_discrete("red")
ggplot(rankingsOfErrors_toplot, aes(position, dataset, color = "method", shape = "method")) +
geom_jitter() +
scale_color_discrete("red", "black")
ggplot(rankingsOfErrors_toplot, aes(position, dataset, color = "method", shape = "method")) +
geom_jitter() +
scale_color_discrete(values = c("red", rep("black", 12)))
c("red", rep("black", 12))
ggplot(rankingsOfErrors_toplot, aes(position, dataset, color = "method", shape = "method")) +
geom_jitter() +
scale_color_discrete(c("red", rep("black", 12)))
ggplot(rankingsOfErrors_toplot, aes(position, dataset, color = "method", shape = "method")) +
geom_jitter() +
scale_color_manual(c("red", rep("black", 12)))
ggplot(rankingsOfErrors_toplot, aes(position, dataset, color = "method", shape = "method")) +
geom_jitter() +
scale_color_manual(value = c("red", rep("black", 12)))
ggplot(rankingsOfErrors_toplot, aes(position, dataset, color = "method", shape = "method")) +
geom_jitter() +
scale_color_manual(values = c("red", rep("black", 12)))
ggplot(rankingsOfErrors_toplot, aes(position, dataset, color = "method", shape = "method")) +
geom_jitter() +
scale_color_manual(values = "red")
rep("black", 12)
ggplot(rankingsOfErrors_toplot, aes(position, dataset, color = "method", shape = "method")) +
geom_jitter() +
scale_color_manual(c("red", "black"))
ggplot(rankingsOfErrors_toplot, aes(position, dataset, color = method, shape = method)) +
geom_jitter() +
scale_color_manual(c("red", rep("black", 12)))
rankingsOfErrors_toplot <- as.data.frame(rankingsOfErrors_borda)
rankingsOfErrors_toplot <- rankingsOfErrors_toplot %>% rownames_to_column(var = "method")
rankingsOfErrors_toplot <- rankingsOfErrors_toplot %>% pivot_longer(-error, names_to = "dataset", values_to = "position")
rankingsOfErrors_toplot <- rankingsOfErrors_toplot %>% transmute_all(as.factor)
rankingsOfErrors_toplot <- rankingsOfErrors_toplot %>% pivot_longer(-method, names_to = "dataset", values_to = "position")
rankingsOfErrors_toplot <- rankingsOfErrors_toplot %>% transmute_all(as.factor)
ggplot(rankingsOfErrors_toplot, aes(position, dataset, color = method, shape = method)) +
geom_jitter() +
scale_color_manual(c("red", rep("black", 12)))
ggplot(rankingsOfErrors_toplot, aes(position, dataset, color = method, shape = method)) +
geom_jitter() +
scale_color_manual(values = c("red", rep("black", 12)))
ggplot(rankingsOfErrors_toplot, aes(position, dataset, color = method, shape = method)) +
geom_jitter() +
scale_color_manual(values = c("red", rep("black", 13)))
ggplot(rankingsOfErrors_toplot, aes(position, dataset, color = method, shape = method)) +
geom_point() +
scale_color_manual(values = c("red", rep("black", 13)))
ggplot(rankingsOfErrors_toplot, aes(position, dataset, color = method, shape = method)) +
geom_point(alph = 0.5) +
scale_color_manual(values = c("red", rep("black", 13)))
ggplot(rankingsOfErrors_toplot, aes(position, dataset, color = method, shape = method)) +
geom_point(alpha = 0.5) +
scale_color_manual(values = c("red", rep("black", 13)))
ggplot(rankingsOfErrors_toplot, aes(position, dataset, color = method, shape = method)) +
geom_jitter() +
scale_color_manual(values = c("red", rep("black", 13)))
ggplot(rankingsOfErrors_toplot, aes(position, dataset, color = method, shape = method)) +
geom_tile() +
geom_jitter() +
scale_color_manual(values = c("red", rep("black", 13)))
ggplot(rankingsOfErrors_toplot, aes(position, dataset)) +
geom_tile() +
geom_jitter(color = method, shape = method) +
scale_color_manual(values = c("red", rep("black", 13)))
ggplot(rankingsOfErrors_toplot, aes(position, dataset)) +
geom_tile() +
geom_jitter(aes(color = method, shape = method)) +
scale_color_manual(values = c("red", rep("black", 13)))
ggplot(rankingsOfErrors_toplot, aes(position, dataset)) +
geom_tile(color = "white") +
geom_jitter(aes(color = method, shape = method)) +
scale_color_manual(values = c("red", rep("black", 13)))
ggplot(rankingsOfErrors_toplot, aes(position, dataset)) +
geom_tile(fill = "white") +
geom_jitter(aes(color = method, shape = method)) +
scale_color_manual(values = c("red", rep("black", 13)))
ggplot(rankingsOfErrors_toplot, aes(position, dataset)) +
geom_tile(fill = "white", color = "black") +
geom_jitter(aes(color = method, shape = method)) +
scale_color_manual(values = c("red", rep("black", 13)))
ggplot(rankingsOfErrors_toplot, aes(position, dataset)) +
geom_tile(fill = "white", color = "black") +
geom_jitter(aes(color = method, shape = method), height = 0) +
scale_color_manual(values = c("red", rep("black", 13)))
ggplot(rankingsOfErrors_toplot, aes(position, dataset)) +
geom_tile(fill = "white", color = "black") +
geom_jitter(aes(color = method, shape = method), height = 0) +
scale_color_manual(values = c("red", rep("black", 13))) +
scale_shape_manual(values = 0:14)
rankingsOfErrors_toplot
rankingsOfErrors_toplot$dataset[1]
str_match(rankingsOfErrors_toplot$dataset[1], "data_k.*?f.")
str_match(rankingsOfErrors_toplot$dataset[1], "data_k(.*?)f.")
str_match(rankingsOfErrors_toplot$dataset[1], "data_k(.*?)f.")[2]
as.numeric(str_match(rankingsOfErrors_toplot$dataset[1], "data_k(.*?)f.")[2])
rankingsOfErrors_toplot %>% mutate(k = as.numeric(str_match(dataset, "data_k(.*?)f.")[2]))
ks <- as.numeric(str_match(rankingsOfErrors_toplot$dataset, "data_k(.*?)f.")[2])
ks
ks <- as.numeric(str_match(rankingsOfErrors_toplot$dataset, "data_k(.*?)f."))
ks <- str_match(rankingsOfErrors_toplot$dataset, "data_k(.*?)f.")
ks
ks <- str_match(rankingsOfErrors_toplot$dataset, "data_k(.*?)f.")[,2]
ks
ks <- as.numeric(str_match(rankingsOfErrors_toplot$dataset, "data_k(.*?)f.")[,2])
ks
rankingsOfErrors_toplot$dataset
ks <- as.numeric(str_match(rankingsOfErrors_toplot$dataset, "data_k(.*?)f.")[,2])
rankingsOfErrors_toplot %>% mutate(k = ks)
fs <- as.numeric(str_match(rankingsOfErrors_toplot$dataset, "data_k.?f(.*?).")[,2])
fs
fs <- as.numeric(str_match(rankingsOfErrors_toplot$dataset, "data_k.f(.*?).")[,2])
fs
str_match(rankingsOfErrors_toplot$dataset, "data_k.f(.*?).")
str_match(rankingsOfErrors_toplot$dataset, "data_k.f(.*?)")
str_match(rankingsOfErrors_toplot$dataset, "data_k..f(.*?)")
str_match(rankingsOfErrors_toplot$dataset, "data_k.+f(.*?)")
str_match(rankingsOfErrors_toplot$dataset, "data_k.*f(.*?)")
str_match(rankingsOfErrors_toplot$dataset, "data_k.f(.*?)")
str_extract(rankingsOfErrors_toplot$dataset, "data_k.f(.*?)")
str_extract(rankingsOfErrors_toplot$dataset, "data_k.f")
str_extract(rankingsOfErrors_toplot$dataset, "data_k.f")
str_remove(rankingsOfErrors_toplot$dataset, "data_k.f")
str_remove(rankingsOfErrors_toplot$dataset, "data_k.?f")
str_remove(rankingsOfErrors_toplot$dataset, "data_k.+f")
fs <- as.numeric(str_remove(rankingsOfErrors_toplot$dataset, "data_k.+f"))
rankingsOfErrors_toplot %>% mutate(k = ks, nfeatures = fs)
rankingsOfErrors_toplot <- as.data.frame(rankingsOfErrors_borda)
rankingsOfErrors_toplot <- rankingsOfErrors_toplot %>% rownames_to_column(var = "method")
rankingsOfErrors_toplot <- rankingsOfErrors_toplot %>% pivot_longer(-method, names_to = "dataset", values_to = "position")
ks <- as.numeric(str_match(rankingsOfErrors_toplot$dataset, "data_k(.*?)f.")[,2])
fs <- as.numeric(str_remove(rankingsOfErrors_toplot$dataset, "data_k.+f"))
rankingsOfErrors_toplot %>% mutate(k = ks, nfeatures = fs)
rankingsOfErrors_toplot <- rankingsOfErrors_toplot %>% transmute_all(as.factor)
rankingsOfErrors_toplot <- rankingsOfErrors_toplot %>% mutate(k = ks, nfeatures = fs)
rankingsOfErrors_toplot <- rankingsOfErrors_toplot %>% transmute_all(as.factor)
rankingsOfErrors_toplot
ggplot(rankingsOfErrors_toplot, aes(position, dataset)) +
geom_tile(fill = "white", color = "black") +
geom_jitter(aes(color = method, shape = method), height = 0) +
scale_color_manual(values = c("red", rep("black", 13))) +
scale_shape_manual(values = 0:14)
ggplot(rankingsOfErrors_toplot, aes(position, dataset)) +
geom_tile(fill = "white", color = "black") +
geom_jitter(aes(color = method, shape = method), height = 0) +
scale_color_manual(values = c("red", rep("black", 13))) +
scale_shape_manual(values = 0:14) +
facet_grid(k ~ .)
ggplot(rankingsOfErrors_toplot, aes(position, dataset)) +
geom_tile(fill = "white", color = "black") +
geom_jitter(aes(color = method, shape = method), height = 0) +
scale_color_manual(values = c("red", rep("black", 13))) +
scale_shape_manual(values = 0:14) +
facet_wrao(k ~ .)
ggplot(rankingsOfErrors_toplot, aes(position, dataset)) +
geom_tile(fill = "white", color = "black") +
geom_jitter(aes(color = method, shape = method), height = 0) +
scale_color_manual(values = c("red", rep("black", 13))) +
scale_shape_manual(values = 0:14) +
facet_wrap(k ~ .)
ggplot(rankingsOfErrors_toplot, aes(dataset, position)) +
geom_tile(fill = "white", color = "black") +
geom_jitter(aes(color = method, shape = method), height = 0) +
scale_color_manual(values = c("red", rep("black", 13))) +
scale_shape_manual(values = 0:14) #+
ggplot(rankingsOfErrors_toplot, aes(dataset, position)) +
geom_tile(fill = "white", color = "black") +
geom_jitter(aes(color = method, shape = method), height = 0) +
scale_color_manual(values = c("red", rep("black", 13))) +
scale_shape_manual(values = 0:14) +
facet_wrap(k ~ .)
ggplot(rankingsOfErrors_toplot, aes(position, dataset)) +
geom_tile(fill = "white", color = "black") +
geom_jitter(aes(color = method, shape = method), height = 0) +
scale_color_manual(values = c("red", rep("black", 13))) +
scale_shape_manual(values = 0:14) +
ggplot(rankingsOfErrors_toplot, aes(position, dataset)) +
geom_tile(fill = "white", color = "black") +
geom_jitter(aes(color = method, shape = method), height = 0) +
scale_color_manual(values = c("red", rep("black", 13))) +
scale_shape_manual(values = 0:14) # +
ggplot(rankingsOfErrors_toplot, aes(position, dataset)) +
geom_tile(fill = "white", color = "black") +
geom_jitter(aes(color = method, shape = method), height = 0) +
scale_color_manual(values = c("red", rep("black", 13))) +
scale_shape_manual(values = 0:14)  +
facet_grid(k ~ features)
ggplot(rankingsOfErrors_toplot, aes(position, dataset)) +
geom_tile(fill = "white", color = "black") +
geom_jitter(aes(color = method, shape = method), height = 0) +
scale_color_manual(values = c("red", rep("black", 13))) +
scale_shape_manual(values = 0:14)  +
facet_grid(k ~ features, scales = "free")
rankingsOfErrors_toplot
ggplot(rankingsOfErrors_toplot, aes(position, dataset)) +
geom_tile(fill = "white", color = "black") +
geom_jitter(aes(color = method, shape = method), height = 0) +
scale_color_manual(values = c("red", rep("black", 13))) +
scale_shape_manual(values = 0:14)  +
facet_grid(k ~ features, scales = "free", space = "free")
ggplot(rankingsOfErrors_toplot, aes(position, dataset)) +
geom_tile(fill = "white", color = "black") +
geom_jitter(aes(color = method, shape = method), height = 0) +
scale_color_manual(values = c("red", rep("black", 13))) +
scale_shape_manual(values = 0:14)  +
facet_grid(k ~ ., scales = "free", space = "free")
# Compare the results by number of features
ggplot(rankingsOfErrors_toplot, aes(position, dataset)) +
geom_tile(fill = "white", color = "black") +
geom_jitter(aes(color = method, shape = method), height = 0) +
scale_color_manual(values = c("red", rep("black", 13))) +
scale_shape_manual(values = 0:14)  +
facet_grid(features ~ ., scales = "free", space = "free")
rankingsOfErrors_toplot
# Compare the results by number of features
ggplot(rankingsOfErrors_toplot, aes(position, dataset)) +
geom_tile(fill = "white", color = "black") +
geom_jitter(aes(color = method, shape = method), height = 0) +
scale_color_manual(values = c("red", rep("black", 13))) +
scale_shape_manual(values = 0:14)  +
facet_grid(nfeatures ~ ., scales = "free", space = "free")
# Compare the results by k
ggplot(rankingsOfErrors_toplot, aes(position, dataset)) +
geom_tile(fill = "white", color = "black") +
geom_jitter(aes(color = method, shape = method), height = 0, width = 0.2) +
scale_color_manual(values = c("red", rep("black", 13))) +
scale_shape_manual(values = 0:14)  +
facet_grid(k ~ ., scales = "free", space = "free")
# Compare the results by k
ggplot(rankingsOfErrors_toplot, aes(position, dataset)) +
geom_tile(fill = "white", color = "black") +
geom_jitter(aes(color = method, shape = method), height = 0, width = 0.5) +
scale_color_manual(values = c("red", rep("black", 13))) +
scale_shape_manual(values = 0:14)  +
facet_grid(k ~ ., scales = "free", space = "free")
# Compare the results by k
ggplot(rankingsOfErrors_toplot, aes(position, dataset)) +
geom_tile(fill = "white", color = "black") +
geom_jitter(aes(color = method, shape = method), height = 0) +
scale_color_manual(values = c("red", rep("black", 13))) +
scale_shape_manual(values = 0:14)  +
facet_grid(k ~ ., scales = "free", space = "free")
results_dataset_errors_sorted
results_dataset_errors
datasets_results[[1]]
# Number of iters before converge
results_dataset_iters <- lapply(datasets_results, function(x) lapply(x, x$iter))
get_num_iter <- function(results_of_one_dataset) {
sapply(results_of_one_dataset, function(x) x$iter)
}
get_num_iter(datasets_results[[1]])
# Number of iters before converge
results_dataset_iters <- lapply(datasets_results, get_num_iter)
results_dataset_iters
sapply(results_dataset_iters, sort)
lapply(results_dataset_iters, sort)
# Create ranking
(rankingsOfIters <- lapply(results_dataset_iters, function(x) lapply(x, ranking)))
results_dataset_iters
results_dataset_iters[1]
results_dataset_iters[[1]]
ranking(results_dataset_iters[[1]])
ranking(results_dataset_iters[[2]])
ranking(results_dataset_iters[[3]])
ranking(results_dataset_iters[[4]])
ranking
results_dataset_iters
lapply(results_dataset_iters, function(x) lapply(x, ranking)))
lapply(results_dataset_iters, function(x) lapply(x, ranking))
# Create ranking
(rankingsOfIters <- lapply(results_dataset_iters, ranking))
results_dataset_iters
lapply(results_dataset_iters, sort)
results_dataset_iters
names(results_dataset_iters) <- names(datasets)
results_dataset_iters
load("~/Desktop/Github/clustering/.RData")
install.packages("ggplot2")
install.packages("tidyverse")
install.packages("clusterlab")
library(tidyverse)
library(clusterlab)
check
# Library all the necessary packages
library(clusterlab)
library(tidyverse)
library(testthat)
install.packages("testthat")
datasets_results
