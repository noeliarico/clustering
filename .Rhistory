r = 2,
# the number of samples in each cluster
numbervec = c(4, 4, 4),
# standard deviation of each cluster
sdvec = c(1, 3, 2),
# how many units to push each cluster away from the initial placement
alphas = c(3, 5, 1),
# the number of features for the data
features = 2,
seed = 1234)
(points <- as.tibble(t(data$synthetic_data)) %>% rename(x = 1, y = 2))
normalize <- function(x){(x-min(x))/(max(x)-min(x))}
apply(points, 1, normalize)
apply(points, 2, normalize)
library(clusterlab)
data <- clusterlab(centers = 3, # the number of clusters to simulate
# the number of units of the radius of the circle on which the clusters are generated
r = 2,
# the number of samples in each cluster
numbervec = c(4, 4, 4),
# standard deviation of each cluster
sdvec = c(1, 3, 2),
# how many units to push each cluster away from the initial placement
alphas = c(3, 5, 1),
# the number of features for the data
features = 2,
seed = 1234)
(points <- as.tibble(t(data$synthetic_data)) %>% rename(x = 1, y = 2))
normalize <- function(x){(x-min(x))/(max(x)-min(x))}
points <- apply(points, 2, normalize)
dyn.load("02.method/rkmeans/rkmeans.so")
savehistory(file = ".Rhistory")
set.seed(2020)
out_rkmeans1 <- rkmeans(x = points, centers = 3, iter.max = 5, nstart = 1, trace = FALSE, distances = 1:13, dist = 1)
set.seed(2020)
out_rkmeans2 <- rkmeans(x = points, centers = 3, iter.max = 5, nstart = 1, trace = FALSE, distances = 1:13, dist = 2)
set.seed(2020)
out_rkmeans3 <- rkmeans(x = points, centers = 3, iter.max = 5, nstart = 1, trace = FALSE, distances = 1:13, dist = 3)
set.seed(2020)
out_rkmeans4 <- rkmeans(x = points, centers = 3, iter.max = 5, nstart = 1, trace = FALSE, distances = 1:13, dist = 4)
set.seed(2020)
out_rkmeans4 <- rkmeans(x = points, centers = 3, iter.max = 5, nstart = 1, trace = FALSE, distances = 1:13, dist = 5)
set.seed(2020)
out_rkmeans4 <- rkmeans(x = points, centers = 3, iter.max = 5, nstart = 1, trace = FALSE, distances = 1:13, dist = 6)
set.seed(2020)
out_rkmeans4 <- rkmeans(x = points, centers = 3, iter.max = 5, nstart = 1, trace = FALSE, distances = 1:13, dist = 7)
set.seed(2020)
out_rkmeans4 <- rkmeans(x = points, centers = 3, iter.max = 5, nstart = 1, trace = FALSE, distances = 1:13, dist = 8)
set.seed(2020)
out_rkmeans4 <- rkmeans(x = points, centers = 3, iter.max = 5, nstart = 1, trace = FALSE, distances = 1:13, dist = 9)
set.seed(2020)
out_rkmeans4 <- rkmeans(x = points, centers = 3, iter.max = 5, nstart = 1, trace = FALSE, distances = 1:13, dist = 10)
set.seed(2020)
out_rkmeans4 <- rkmeans(x = points, centers = 3, iter.max = 5, nstart = 1, trace = FALSE, distances = 1:13, dist = 11)
points
ggplot(points, aes(x, y)) + geom_point()
points
points <- as_tibble(apply(points, 2, normalize))
points
points <- as_tibble(apply(points, 2, normalize))
ggplot(points, aes(x, y)) + geom_point()
c(2, 7, 9)
set.seed(2020)
out_rkmeans1 <- rkmeans(x = points, centers = c(2, 7, 9), iter.max = 5, nstart = 1, trace = FALSE, distances = 1:13, dist = 1)
centers = c(0,0.120,1,0.694,0.342,1)
centers <- c(0,0.120,1,0.694,0.342,1)
centers
centers <- matrix(centers, byrow = TRUE, ncol = 2)
dyn.load("02.method/rkmeans/rkmeans.so")
savehistory(file = ".Rhistory")
set.seed(2020)
out_rkmeans1 <- rkmeans(x = points, centers = c(2, 7, 9), iter.max = 5, nstart = 1, trace = FALSE, distances = 1:13, dist = 1)
centers <- c(0,0.120,1,0.694,0.342,1)
centers <- matrix(centers, byrow = TRUE, ncol = 2)
centers
length(centers)
ncol(points)
ncol(centers)
dyn.load("02.method/rkmeans/rkmeans.so")
savehistory(file = ".Rhistory")
set.seed(2020)
out_rkmeans1 <- rkmeans(x = points, centers = centers, iter.max = 5, nstart = 1, trace = FALSE, distances = 1:13, dist = 1)
library(clusterlab)
data <- clusterlab(centers = 3, # the number of clusters to simulate
# the number of units of the radius of the circle on which the clusters are generated
r = 2,
# the number of samples in each cluster
numbervec = c(4, 4, 4),
# standard deviation of each cluster
sdvec = c(1, 3, 2),
# how many units to push each cluster away from the initial placement
alphas = c(3, 5, 1),
# the number of features for the data
features = 2,
seed = 1234)
(points <- as.tibble(t(data$synthetic_data)) %>% rename(x = 1, y = 2))
normalize <- function(x){((x-min(x))/(max(x)-min(x)))+10}
points <- as_tibble(apply(points, 2, normalize))
centers <- c(0,0.120,1,0.694,0.342,1)
centers <- matrix(centers, byrow = TRUE, ncol = 2)
dyn.load("02.method/rkmeans/rkmeans.so")
savehistory(file = ".Rhistory")
set.seed(2020)
out_rkmeans1 <- rkmeans(x = points, centers = centers, iter.max = 5, nstart = 1, trace = FALSE, distances = 1:13, dist = 1)
set.seed(2020)
out_rkmeans2 <- rkmeans(x = points, centers = 3, iter.max = 5, nstart = 1, trace = FALSE, distances = 1:13, dist = 2)
set.seed(2020)
out_rkmeans1 <- rkmeans(x = points, centers = centers, iter.max = 5, nstart = 1, trace = FALSE, distances = 1:13, dist = 1)
library(clusterlab)
data <- clusterlab(centers = 3, # the number of clusters to simulate
# the number of units of the radius of the circle on which the clusters are generated
r = 2,
# the number of samples in each cluster
numbervec = c(4, 4, 4),
# standard deviation of each cluster
sdvec = c(1, 3, 2),
# how many units to push each cluster away from the initial placement
alphas = c(3, 5, 1),
# the number of features for the data
features = 2,
seed = 1234)
(points <- as.tibble(t(data$synthetic_data)) %>% rename(x = 1, y = 2))
normalize <- function(x){((x-min(x))/(max(x)-min(x)))}
points <- as_tibble(apply(points, 2, normalize))
centers <- c(0,0.120,1,0.694,0.342,1)
centers <- matrix(centers, byrow = TRUE, ncol = 2)
dyn.load("02.method/rkmeans/rkmeans.so")
savehistory(file = ".Rhistory")
set.seed(2020)
out_rkmeans1 <- rkmeans(x = points, centers = centers, iter.max = 5, nstart = 1, trace = FALSE, distances = 1:13, dist = 1)
set.seed(2020)
out_rkmeans2 <- rkmeans(x = points, centers = 3, iter.max = 5, nstart = 1, trace = FALSE, distances = 1:13, dist = 2)
set.seed(2020)
out_rkmeans3 <- rkmeans(x = points, centers = 3, iter.max = 5, nstart = 1, trace = FALSE, distances = 1:13, dist = 3)
set.seed(2020)
out_rkmeans2 <- rkmeans(x = points, centers = 3, iter.max = 5, nstart = 1, trace = FALSE, distances = 1:13, dist = 2)
set.seed(2020)
out_rkmeans3 <- rkmeans(x = points, centers = 3, iter.max = 5, nstart = 1, trace = FALSE, distances = 1:13, dist = 3)
set.seed(2020)
out_rkmeans4 <- rkmeans(x = points, centers = 3, iter.max = 5, nstart = 1, trace = FALSE, distances = 1:13, dist = 4)
library(clusterlab)
data <- clusterlab(centers = 3, # the number of clusters to simulate
# the number of units of the radius of the circle on which the clusters are generated
r = 2,
# the number of samples in each cluster
numbervec = c(4, 4, 4),
# standard deviation of each cluster
sdvec = c(1, 3, 2),
# how many units to push each cluster away from the initial placement
alphas = c(3, 5, 1),
# the number of features for the data
features = 2,
seed = 1234)
(points <- as.tibble(t(data$synthetic_data)) %>% rename(x = 1, y = 2))
normalize <- function(x){((x-min(x))/(max(x)-min(x)))+10}
points <- as_tibble(apply(points, 2, normalize))
centers <- c(0,0.120,1,0.694,0.342,1)
centers <- matrix(centers, byrow = TRUE, ncol = 2)
dyn.load("02.method/rkmeans/rkmeans.so")
savehistory(file = ".Rhistory")
set.seed(2020)
out_rkmeans1 <- rkmeans(x = points, centers = centers, iter.max = 5, nstart = 1, trace = FALSE, distances = 1:13, dist = 1)
set.seed(2020)
out_rkmeans2 <- rkmeans(x = points, centers = 3, iter.max = 5, nstart = 1, trace = FALSE, distances = 1:13, dist = 2)
library(clusterlab)
data <- clusterlab(centers = 3, # the number of clusters to simulate
# the number of units of the radius of the circle on which the clusters are generated
r = 2,
# the number of samples in each cluster
numbervec = c(4, 4, 4),
# standard deviation of each cluster
sdvec = c(1, 3, 2),
# how many units to push each cluster away from the initial placement
alphas = c(3, 5, 1),
# the number of features for the data
features = 2,
seed = 1234)
(points <- as.tibble(t(data$synthetic_data)) %>% rename(x = 1, y = 2))
normalize <- function(x){((x-min(x))/(max(x)-min(x)))}
points <- as_tibble(apply(points, 2, normalize))
centers <- c(0,0.120,1,0.694,0.342,1)
centers <- matrix(centers, byrow = TRUE, ncol = 2)
dyn.load("02.method/rkmeans/rkmeans.so")
savehistory(file = ".Rhistory")
set.seed(2020)
out_rkmeans1 <- rkmeans(x = points, centers = centers, iter.max = 5, nstart = 1, trace = FALSE, distances = 1:13, dist = 1)
set.seed(2020)
out_rkmeans2 <- rkmeans(x = points, centers = 3, iter.max = 5, nstart = 1, trace = FALSE, distances = 1:13, dist = 2)
set.seed(2020)
out_rkmeans3 <- rkmeans(x = points, centers = 3, iter.max = 5, nstart = 1, trace = FALSE, distances = 1:13, dist = 3)
set.seed(2020)
out_rkmeans4 <- rkmeans(x = points, centers = 3, iter.max = 5, nstart = 1, trace = FALSE, distances = 1:13, dist = 4)
set.seed(2020)
out_rkmeans4 <- rkmeans(x = points, centers = 3, iter.max = 5, nstart = 1, trace = FALSE, distances = 1:13, dist = 5)
centers
centers <- matrix(centers, byrow = TRUE, ncol = 2)
dyn.load("02.method/rkmeans/rkmeans.so")
savehistory(file = ".Rhistory")
set.seed(1)
data1 <- clusterlab(centers = 3, # the number of clusters to simulate
# the number of units of the radius of the circle on which the clusters are generated
r = 2,
# the number of samples in each cluster
numbervec = sample(100:200, 5),
# standard deviation of each cluster
sdvec = sample(1:5, 5),
# how many units to push each cluster away from the initial placement
alphas = sample(1:5, 5),
# the number of features for the data
features = 2,
seed = 1234)
library(clusterlab)
set.seed(1)
data1 <- clusterlab(centers = 3, # the number of clusters to simulate
# the number of units of the radius of the circle on which the clusters are generated
r = 2,
# the number of samples in each cluster
numbervec = sample(100:200, 5),
# standard deviation of each cluster
sdvec = sample(1:5, 5),
# how many units to push each cluster away from the initial placement
alphas = sample(1:5, 5),
# the number of features for the data
features = 2,
seed = 1234)
sample(100:200, 5)
data1
head(data1)
head(data1)
data1 <- clusterlab(centers = 3, # the number of clusters to simulate
# the number of units of the radius of the circle on which the clusters are generated
r = 2,
# the number of samples in each cluster
numbervec = sample(100:200, 5),
# standard deviation of each cluster
sdvec = sample(1:5, 5),
# how many units to push each cluster away from the initial placement
alphas = sample(1:5, 5),
# the number of features for the data
features = 2,
seed = 1234)
data1$synthetic_data
data <- t(data1$synthetic_data)
data
library(clusterlab)
set.seed(1)
random_generator <- function(centers, features) {
desired_length <- 6 # 13+2
datasets <- vector(mode = "list", length = desired_length)
set.seed(2020)
for (i in 2:8) {
data <- clusterlab(centers = i+1, # the number of clusters to simulate
# the number of units of the radius of the circle on which the clusters are generated
r = 2,
# the number of samples in each cluster
numbervec = sample(100:200, 5),
# standard deviation of each cluster
sdvec = sample(1:5, 5),
# how many units to push each cluster away from the initial placement
alphas = sample(1:5, 5),
# the number of features for the data
features = i,
seed = 1234)
data <- t(data1$synthetic_data)
datasets[[i-1]] <- data
}
datasets
}
datasets <- random_generator()
datasets[[1]]
nrow(datasets[[1]])
resultsd1 <- train_rkmeans(datasets[[1]], 3)
train_rkmeans <- function(points, cen) {
points <- as_tibble(apply(points, 2, normalize))
print(head(points))
pb <- txtProgressBar(min = 0, max = 15)
desired_length <- 15 # 13+2
results <- vector(mode = "list", length = desired_length)
for(i in 1:13) {
setTxtProgressBar(pb, i)
set.seed(2020)
out_rkmeans <- rkmeans(x = points, centers = cen, iter.max = 100, nstart = 1,
trace = FALSE, distances = 1:13, dist = i)
results[[i]] <- out_rkmeans
}
setTxtProgressBar(pb, 14)
set.seed(2020)
out_rkmeans <- rkmeans(x = points, centers = cen, iter.max = 100, nstart = 1,
trace = FALSE, distances = 1:13, dist = 101)
results[[14]] <- out_rkmeans
setTxtProgressBar(pb, 15)
set.seed(2020)
out_rkmeans <- rkmeans(x = points, centers = cen, iter.max = 100, nstart = 1,
trace = FALSE, distances = 1:13, dist = 102)
results[[15]] <- out_rkmeans
close(pb)
return(results)
}
resultsd1 <- train_rkmeans(datasets[[1]], 3)
library(tidyverse)
resultsd1 <- train_rkmeans(datasets[[1]], 3)
normalize <- function(x){((x-min(x))/(max(x)-min(x)))}
train_rkmeans <- function(points, cen) {
points <- as_tibble(apply(points, 2, normalize))
print(head(points))
pb <- txtProgressBar(min = 0, max = 15)
desired_length <- 15 # 13+2
results <- vector(mode = "list", length = desired_length)
for(i in 1:13) {
setTxtProgressBar(pb, i)
set.seed(2020)
out_rkmeans <- rkmeans(x = points, centers = cen, iter.max = 100, nstart = 1,
trace = FALSE, distances = 1:13, dist = i)
results[[i]] <- out_rkmeans
}
setTxtProgressBar(pb, 14)
set.seed(2020)
out_rkmeans <- rkmeans(x = points, centers = cen, iter.max = 100, nstart = 1,
trace = FALSE, distances = 1:13, dist = 101)
results[[14]] <- out_rkmeans
setTxtProgressBar(pb, 15)
set.seed(2020)
out_rkmeans <- rkmeans(x = points, centers = cen, iter.max = 100, nstart = 1,
trace = FALSE, distances = 1:13, dist = 102)
results[[15]] <- out_rkmeans
close(pb)
return(results)
}
resultsd1 <- train_rkmeans(datasets[[1]], 3)
source('~/Desktop/Github/clustering/02.method/rkmeans/rkmeans.R', echo=TRUE)
resultsd1 <- train_rkmeans(datasets[[1]], 3)
dyn.load("02.method/distances/distances.so")
dyn.load("02.method/rkmeans/rkmeans.so")
resultsd1 <- train_rkmeans(datasets[[1]], 3)
sapply(resultsd1, function(x) sum(x$tot.withinss))
resultsd2 <- train_rkmeans(datasets[[2]], 4)
sapply(resultsd2, function(x) sum(x$tot.withinss))
resultsd2 <- train_rkmeans(datasets[[3]], 5)
resultsd2
resultsd2$cluster
resultsd2
resultsd2
sapply(resultsd2, function(x) sum(x$tot.withinss))
resultsd2
sapply(resultsd2, function(x) sum(x$tot.withinss))
sapply(resultsd1, function(x) sum(x$tot.withinss))
sapply(resultsd1, function(x) x$tot.withinss)
sapply(resultsd1, function(x) x$tot.withinss)
resultsd1[[1]]$tot.withinss
paste0("train", 1:11)
colnames(paste0("train_d", 1:13))
paste0("train_d", 1:13)
colnames(c(paste0("train_d", 1:13), "train_plurality", "train_borda")
)
errorsd1 <- sapply(resultsd1, function(x) x$tot.withinss)
errorsd1
colnames(errorsd1) <- c(paste0("train_d", 1:13), "train_plurality", "train_borda")
errorsd1
rownames(errorsd1) <- c(paste0("error_d", 1:13))
errorsd1
colSums(errorsd1)
dr <- vector(mode = "list", length = 6)
for(i in 1:6) {
resultsd1 <- train_rkmeans(datasets[[i]], i+2)
errorsd1 <- sapply(resultsd1, function(x) x$tot.withinss)
colnames(errorsd1) <- c(paste0("train_d", 1:13), "train_plurality", "train_borda")
rownames(errorsd1) <- c(paste0("error_d", 1:13))
colSums(errorsd1)
dr[[i]] <- resultsd1
}
dr[[1]]
calculate_errors <- function(resultsd1) {
errorsd1 <- sapply(resultsd1, function(x) x$tot.withinss)
colnames(errorsd1) <- c(paste0("train_d", 1:13), "train_plurality", "train_borda")
rownames(errorsd1) <- c(paste0("error_d", 1:13))
colSums(errorsd1)
}
lapply(dr, calculate_errors)
kmeans(a1, centers = 20, iter.max = 100)
kmeans(a1, centers = 50, iter.max = 100)
kmeans(a1, centers = 50, iter.max = 100)$centers
kmeans(a1, centers = 100, iter.max = 100)$centers
set.seed(2020)
out1 <- rkmeans(x = a1, centers = 5, iter.max = 50, nstart = 1, trace = FALSE, distances = c(1:13), dist = 2)
out1
out1$withinss
set.seed(2020)
out1 <- rkmeans(x = a1, centers = 20, iter.max = 50, nstart = 1, trace = FALSE, distances = c(1:13), dist = 2)
out1
out1$centers
table(out1$cluster)
set.seed(2020)
out1 <- rkmeans(x = a1, centers = 20, iter.max = 50, nstart = 1, trace = FALSE, distances = c(1:13), dist = 1)
table(out1$cluster)
set.seed(2020)
out1 <- rkmeans(x = a1, centers = 20, iter.max = 50, nstart = 1, trace = FALSE, distances = c(1:13), dist = 3)
table(out1$cluster)
set.seed(2020)
out1 <- rkmeans(x = a1, centers = 20, iter.max = 50, nstart = 1, trace = FALSE, distances = c(1:13), dist = 4)
table(out1$cluster)
set.seed(2020)
out1 <- rkmeans(x = a1, centers = 20, iter.max = 50, nstart = 1, trace = FALSE, distances = c(1:13), dist = 5)
table(out1$cluster)
set.seed(2020)
out1 <- rkmeans(x = a1, centers = 20, iter.max = 50, nstart = 1, trace = FALSE, distances = c(1:13), dist = 6)
table(out1$cluster)
set.seed(2020)
out1 <- rkmeans(x = a1, centers = 20, iter.max = 50, nstart = 1, trace = FALSE, distances = c(1:13), dist = 7)
table(out1$cluster)
set.seed(2020)
out1 <- rkmeans(x = a1, centers = 20, iter.max = 50, nstart = 1, trace = FALSE, distances = c(1:13), dist = 8)
table(out1$cluster)
set.seed(2020)
out1 <- rkmeans(x = a1, centers = 20, iter.max = 50, nstart = 1, trace = FALSE, distances = c(1:13), dist = 9)
table(out1$cluster)
set.seed(2020)
out1 <- rkmeans(x = a1, centers = 20, iter.max = 50, nstart = 1, trace = FALSE, distances = c(1:13), dist = 10)
table(out1$cluster)
set.seed(2020)
out1 <- rkmeans(x = a1, centers = 20, iter.max = 50, nstart = 1, trace = FALSE, distances = c(1:13), dist = 11)
table(out1$cluster)
set.seed(2020)
out1 <- rkmeans(x = a1, centers = 20, iter.max = 50, nstart = 1, trace = FALSE, distances = c(1:13), dist = 12)
table(out1$cluster)
set.seed(2020)
out1 <- rkmeans(x = a1, centers = 20, iter.max = 50, nstart = 1, trace = FALSE, distances = c(1:13), dist = 13)
table(out1$cluster)
set.seed(2020)
set.seed(2020)
out1 <- rkmeans(x = a1[1:25,], centers = 20, iter.max = 50, nstart = 1, trace = FALSE, distances = c(1:13), dist = 14)
set.seed(2020)
out1 <- rkmeans(x = a1[1:25,], centers = 20, iter.max = 1, nstart = 1, trace = FALSE, distances = c(1:13), dist = 14)
table(out1$cluster)
dyn.load("02.method/distances/distances.so")
dyn.load("02.method/rkmeans/rkmeans.so")
set.seed(2020)
out1 <- rkmeans(x = a1[1:25,], centers = 20, iter.max = 1, nstart = 1, trace = FALSE, distances = c(1:13), dist = 14)
set.seed(2020)
out1 <- rkmeans(x = a1[1:25,], centers = 20, iter.max = 1, nstart = 1, trace = FALSE, distances = c(1:13), dist = 14)
set.seed(2020)
out1 <- rkmeans(x = a1[1:25,], centers = 20, iter.max = 1, nstart = 1, trace = FALSE, distances = c(1:13), dist = 101)
set.seed(2020)
out1 <- rkmeans(x = a1[1:25,], centers = 20, iter.max = 1, nstart = 1, trace = FALSE, distances = c(1:13), dist = 101)
set.seed(2020)
out1 <- rkmeans(x = a1[1:25,], centers = 20, iter.max = 1, nstart = 1, trace = FALSE, distances = c(1:13), dist = 101)
set.seed(2020)
out1 <- rkmeans(x = a1[1:25,], centers = 20, iter.max = 1, nstart = 1, trace = FALSE, distances = c(1:13), dist = 101)
dyn.load("02.method/distances/distances.so")
dyn.load("02.method/rkmeans/rkmeans.so")
set.seed(2020)
out1 <- rkmeans(x = a1[1:25,], centers = 20, iter.max = 1, nstart = 1, trace = FALSE, distances = c(1:13), dist = 101)
table(out1$cluster)
set.seed(2020)
out1 <- rkmeans(x = a1[1:25,], centers = 20, iter.max = 2, nstart = 1, trace = FALSE, distances = c(1:13), dist = 101)
set.seed(2020)
out1 <- rkmeans(x = a1[1:25,], centers = 20, iter.max = 1, nstart = 1, trace = FALSE, distances = c(1:13), dist = 2)
table(out1$cluster)
table(out1$cluster)
out1$cluster
set.seed(2020)
out1 <- rkmeans(x = a1[1:25,], centers = 20, iter.max = 1, nstart = 1, trace = FALSE, distances = c(1:13), dist = 101)
table(out1$cluster)
set.seed(2020)
out1 <- rkmeans(x = a1[1:25,], centers = 20, iter.max = 1, nstart = 1, trace = FALSE, distances = c(1:13), dist = 2)
table(out1$cluster)
set.seed(2020)
out2 <- rkmeans(x = a1[1:25,], centers = 20, iter.max = 1, nstart = 1, trace = FALSE, distances = c(1:13), dist = 10)
table(out2$cluster)
out1$cluster
out2$cluster
set.seed(2020)
out1 <- rkmeans(x = a1[1:25,], centers = 20, iter.max = 1, nstart = 1, trace = FALSE, distances = c(1:13), dist = 2)
table(out1$cluster)
set.seed(2020)
out2 <- rkmeans(x = a1[1:25,], centers = 20, iter.max = 1, nstart = 1, trace = FALSE, distances = c(1:13), dist = 13)
table(out2$cluster)
(out1$cluster)
(out2$cluster)
set.seed(2020)
out2 <- rkmeans(x = a1[1:25,], centers = 20, iter.max = 1, nstart = 1, trace = FALSE, distances = c(1:13), dist = 7)
table(out2$cluster)
out1$cluster)
(out1$cluster)
(out2$cluster)
set.seed(2020)
out1 <- rkmeans(x = a1[1:25,], centers = 20, iter.max = 1, nstart = 1, trace = FALSE, distances = c(1:13), dist = 3)
table(out1$cluster)
set.seed(2020)
out2 <- rkmeans(x = a1[1:25,], centers = 20, iter.max = 1, nstart = 1, trace = FALSE, distances = c(1:13), dist = 7)
table(out2$cluster)
out1$cluster
out2$cluster
set.seed(2020)
out2 <- rkmeans(x = a1[1:25,], centers = 20, iter.max = 1, nstart = 1, trace = FALSE, distances = c(1:13), dist = 101)
table(out2$cluster)
save(ds, errors, file = "results.RData")
save(dr, errors, file = "results.RData")
errors <- lapply(dr, calculate_errors)
save(dr, errors, file = "results.RData")
set.seed(2020)
out2 <- rkmeans(x = a1[1:25,], centers = 20, iter.max = 1, nstart = 1, trace = FALSE, distances = c(1:13), dist = 101)
dyn.load("02.method/distances/distances.so")
dyn.load("02.method/rkmeans/rkmeans.so")
set.seed(2020)
out1 <- rkmeans(x = a1[1:25,], centers = 20, iter.max = 1, nstart = 1, trace = FALSE, distances = c(1:13), dist = 3)
table(out1$cluster)
set.seed(2020)
out2 <- rkmeans(x = a1[1:25,], centers = 20, iter.max = 1, nstart = 1, trace = FALSE, distances = c(1:13), dist = 7)
table(out2$cluster)
set.seed(2020)
out3 <- rkmeans(x = a1[1:25,], centers = 20, iter.max = 1, nstart = 1, trace = FALSE, distances = c(1:13), dist = 101)
table(out3$cluster)
