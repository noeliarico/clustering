bind_rows()
ggplot(data, aes_string(
x = x,
y = y,
color = clusters,
fill = clusters
)) +
geom_point() +
geom_polygon(data = hulls, alpha = 0.1) +
theme_bw()
}
plot_real_clusters(s1c, "real_cluster", "V1", "V2")
fviz_nbclust(s1, kmeans, method = "wss", nstart = 20, k.max = 20) +
geom_vline(xintercept = 4, linetype = 2)+
labs(subtitle = "Elbow method")
library(factoextra)
fviz_nbclust(s1, kmeans, method = "wss", nstart = 20, k.max = 20) +
geom_vline(xintercept = 4, linetype = 2)+
labs(subtitle = "Elbow method")
a1
a1c
heac(a1c)
head(a1c)
train_rkmeans(a1c %>% select(-real_cluster))
train_rkmeans(a1c %>% select(-real_cluster), 20, 5)
a1
rankingsOfErrors_borda
# For each dataset, creates a matrix where the rows represent the
# distance measure use for the clustering process
# The row shows the error calculated with each of the distance measures for
# every version of the clustering
results_dataset_errors <- lapply(datasets_results, calculate_errors)
names(results_dataset_errors) <- names(datasets)
results_dataset_errors_sorted <- lapply(results_dataset_errors, sorted_errors_by_dataset)
# Create ranking
(rankingsOfErrors <- lapply(results_dataset_errors_sorted, function(x) lapply(x, ranking)))
rankingsOfErrors <- lapply(rankingsOfErrors, function(x) Reduce(bind_rows, x))
library(tidyverse)
# Create ranking
(rankingsOfErrors <- lapply(results_dataset_errors_sorted, function(x) lapply(x, ranking)))
rankingsOfErrors <- lapply(rankingsOfErrors, function(x) Reduce(bind_rows, x))
rankingsOfErrors <- lapply(rankingsOfErrors, profile_of_rankings)
rankingsOfErrors_borda <- lapply(rankingsOfErrors, borda_count)
rankingsOfErrors_borda
sink("results.txt")
rankingsOfErrors_borda
sink()
a <- c()
append(a, c(noelia = "hola"))
results_info <- tribble(~name, ~ranking)
lines <- read_lines("results.txt")
for(line in lines) {
if(str_match(line, "data")) {
name <- str_remove(line, "$data_")
} else {
ranking <- str_replace_all(line, ">", "\succ")
ranking <- str_replace_all(ranking, "~", "\sim")
}
results_info <- results_info %>% add_row(name, ranking)
}
for(line in lines) {
if(str_match(line, "data")) {
name <- str_remove(line, "$data_")
} else {
ranking <- str_replace_all(line, ">", "\succ")
ranking <- str_replace_all(ranking, "~", "\sim")
}
results_info <- results_info %>% add_row(name, ranking)
}
results_info <- tribble(~name, ~ranking)
lines <- read_lines("results.txt")
for(line in lines) {
print(line)
# if(str_match(line, "data")) {
#   name <- str_remove(line, "$data_")
# } else {
#   ranking <- str_replace_all(line, ">", "\succ")
#   ranking <- str_replace_all(ranking, "~", "\sim")
# }
#
# results_info <- results_info %>% add_row(name, ranking)
}
for(line in lines) {
if(str_match(line, "data")) {
name <- str_remove(line, "$data_")
}
print(name)
#else {
#   ranking <- str_replace_all(line, ">", "\succ")
#   ranking <- str_replace_all(ranking, "~", "\sim")
# }
#
# results_info <- results_info %>% add_row(name, ranking)
}
for(line in lines) {
if(str_match(line, "data")) {
name <- str_remove(line, "$data_")
}
print(name)
#else {
#   ranking <- str_replace_all(line, ">", "\succ")
#   ranking <- str_replace_all(ranking, "~", "\sim")
# }
#
# results_info <- results_info %>% add_row(name, ranking)
}
line <- lines[[1]]
line
str_remove(line, "$data_")
str_remove(line, "\$data_")
str_remove(line, "data_")
str_remove(line, "$data_")
str_remove(line, "\\$data_")
for(line in lines) {
if(str_match(line, "data")) {
name <- str_remove(line, "\\$data_")
}
print(name)
#else {
#   ranking <- str_replace_all(line, ">", "\succ")
#   ranking <- str_replace_all(ranking, "~", "\sim")
# }
#
# results_info <- results_info %>% add_row(name, ranking)
}
str_match(line, "data")
for(line in lines) {
if(str_detect(line, "data")) {
name <- str_remove(line, "\\$data_")
}
print(name)
#else {
#   ranking <- str_replace_all(line, ">", "\succ")
#   ranking <- str_replace_all(ranking, "~", "\sim")
# }
#
# results_info <- results_info %>% add_row(name, ranking)
}
for(line in lines) {
if(str_detect(line, "data")) {
name <- str_remove(line, "\\$data_")
} else {
ranking <- str_replace_all(line, ">", "\succ")
ranking <- str_replace_all(ranking, "~", "\sim")
}
results_info <- results_info %>% add_row(name, ranking)
}
for(line in lines) {
if(str_detect(line, "data")) {
name <- str_remove(line, "\\$data_")
} else {
ranking <- str_replace_all(line, ">", "\\\\succ")
ranking <- str_replace_all(ranking, "~", "\\\\sim")
}
results_info <- results_info %>% add_row(name, ranking)
}
ranking_to_latex <- function(ranking) {
ranking <- print(rankingsOfErrors_borda)
ranking <- str_replace_all(ranking, ">", "\\\\succ")
ranking <- str_replace_all(ranking, "~", "\\\\sim")
ranking <- paste0("$$", ranking, "$$")
cat(ranking)
invisible(ranking)
}
for(line in lines) {
if(str_detect(line, "data")) {
name <- str_remove(line, "\\$data_")
} else {
ranking <- ranking_to_latex(line)
}
#results_info <- results_info %>% add_row(name, ranking)
}
results_info <- tribble(~name, ~ranking)
lines <- read_lines("results.txt")
ranking_to_latex <- function(ranking) {
ranking <- print(rankingsOfErrors_borda)
ranking <- str_replace_all(ranking, ">", "\\\\succ")
ranking <- str_replace_all(ranking, "~", "\\\\sim")
ranking <- paste0("$$", ranking, "$$")
cat(ranking)
invisible(ranking)
}
for(line in lines) {
if(str_detect(line, "data")) {
name <- str_remove(line, "\\$data_")
} else {
ranking <- ranking_to_latex(line)
}
results_info <- results_info %>% add_row(name, ranking)
}
results_info
ranking_to_latex <- function(ranking) {
ranking <- capture.output(print(rankingsOfErrors_borda))
ranking <- str_replace_all(ranking, ">", "\\\\succ")
ranking <- str_replace_all(ranking, "~", "\\\\sim")
ranking <- paste0("$$", ranking, "$$")
cat(ranking)
invisible(ranking)
}
for(line in lines) {
if(str_detect(line, "data")) {
name <- str_remove(line, "\\$data_")
} else {
ranking <- ranking_to_latex(line)
}
results_info <- results_info %>% add_row(name, ranking)
}
results_info
ranking_to_latex <- function(ranking) {
ranking <- capture.output(print(rankingsOfErrors_borda))
ranking <- str_replace_all(ranking, ">", "\\\\succ")
ranking <- str_replace_all(ranking, "~", "\\\\sim")
ranking <- paste0("$$", ranking, "$$")
return(ranking)
}
for(line in lines) {
if(str_detect(line, "data")) {
name <- str_remove(line, "\\$data_")
} else {
ranking <- ranking_to_latex(line)
}
results_info <- results_info %>% add_row(name, ranking)
}
results_info <- tribble(~name, ~ranking)
lines <- read_lines("results.txt")
for(line in lines) {
if(str_detect(line, "data")) {
name <- str_remove(line, "\\$data_")
} else {
ranking <- ranking_to_latex(line)
}
results_info <- results_info %>% add_row(name, ranking)
}
results_info
results_info <- tribble(~name, ~ranking)
lines <- read_lines("results.txt")
for(line in lines) {
if(str_detect(line, "data")) {
name <- str_remove(line, "\\$data_")
} else {
ranking <- ranking_to_latex(line)
results_info <- results_info %>% add_row(name, ranking)
}
}
results_info
library(xtable)
print(xtable(errors, digits = 3, caption = "Values of each method for the different errors."), include.rownames = FALSE)
print(xtable(results_info, caption = "Values of each method for the different errors."), include.rownames = FALSE)
print(xtable(results_info, caption = "Values of each method for the different errors.", sanitize.text.function = NULL), include.rownames = FALSE)
print(xtable(results_info, caption = "Values of each method for the different errors.", options(xtable.sanitize.rownames.function=identity)), include.rownames = FALSE)
results_info <- tribble(~name, ~ranking)
lines <- read_lines("results.txt")
for(line in lines) {
if(str_detect(line, "data")) {
name <- str_remove(line, "\\$data_")
} else {
#ranking <- ranking_to_latex(line)
ranking <- line
results_info <- results_info %>% add_row(name, ranking)
}
}
library(xtable)
print(xtable(results_info, caption = "Values of each method for the different errors."), include.rownames = FALSE)
a <- capture.output(xtable(results_info, caption = "Values of each method for the different errors."), include.rownames = FALSE)
a <- capture.output(print(xtable(results_info, caption = "Values of each method for the different errors."), include.rownames = FALSE))
a
a <- capture.output(cat(xtable(results_info, caption = "Values of each method for the different errors."), include.rownames = FALSE))
print(xtable(results_info, caption = "Values of each method for the different errors."), include.rownames = FALSE))
print(xtable(results_info, caption = "Values of each method for the different errors."), include.rownames = FALSE)
print(xtable(results_info, caption = "Values of each method for the different errors.", sanitize.text.function = function(x) {
ifelse(grepl("bordaCount", x), paste0("\\textbf{", x, "}"), x)
}), include.rownames = FALSE)
ranking_to_latex <- function(ranking) {
ranking <- capture.output(print(rankingsOfErrors_borda))
ranking <- str_replace_all(ranking, ">", "\\\\succ")
ranking <- str_replace_all(ranking, "~", "\\\\sim")
ranking <- paste0("$$", ranking, "$$")
return(ranking)
}
for(line in lines) {
if(str_detect(line, "data")) {
name <- str_remove(line, "\\$data_")
} else {
#ranking <- ranking_to_latex(line)
ranking <- line
results_info <- results_info %>% add_row(name, ranking)
}
}
print(xtable(results_info, caption = "Values of each method for the different errors.", sanitize.text.function = function(x) {
ifelse(grepl("bordaCount", x), paste0("\\textbf{", x, "}"), x)
}), include.rownames = FALSE)
for(line in lines) {
if(str_detect(line, "data")) {
name <- str_remove(line, "\\$data_")
} else {
ranking <- ranking_to_latex(line)
#ranking <- line
results_info <- results_info %>% add_row(name, ranking)
}
}
results_info <- tribble(~name, ~ranking)
lines <- read_lines("results.txt")
for(line in lines) {
if(str_detect(line, "data")) {
name <- str_remove(line, "\\$data_")
} else {
ranking <- ranking_to_latex(line)
#ranking <- line
results_info <- results_info %>% add_row(name, ranking)
}
}
print(xtable(results_info, caption = "Values of each method for the different errors.", sanitize.text.function = function(x) {
ifelse(grepl("bordaCount", x), paste0("\\textbf{", x, "}"), x)
}), include.rownames = FALSE)
print(xtable(results_info, caption = "Values of each method for the different errors.", sanitize.text.function = function(x) {
gsub(fixed = TRUE, pattern = "_", replacement = "\\_",
x = ifelse(grepl(pattern = "something", x = x), paste0("\\textbf{", x, "}"), x)
)
}), include.rownames = FALSE)
print(xtable(results_info, caption = "Results."), include.rownames = FALSE)
sink("latex.txt")
print(xtable(results_info, caption = "Results."), include.rownames = FALSE)
sink()
results_info <- tribble(~name, ~ranking)
lines <- read_lines("results.txt")
ranking_to_latex <- function(ranking) {
ranking <- capture.output(print(rankingsOfErrors_borda))
ranking <- str_replace_all(ranking, ">", "\\\\succ")
ranking <- str_replace_all(ranking, "~", "\\\\sim")
ranking <- paste0("$$", ranking, "$$")
return(ranking)
}
for(line in lines) {
if(str_detect(line, "data")) {
name <- str_remove(line, "\\$data_")
} else {
ranking <- ranking_to_latex(line)
#ranking <- line
results_info <- results_info %>% add_row(name, ranking)
}
}
library(xtable)
print(xtable(results_info, caption = "Results."), include.rownames = FALSE)
results_info <- tribble(~name, ~ranking)
lines <- read_lines("results.txt")
ranking_to_latex <- function(ranking) {
ranking <- capture.output(print(rankingsOfErrors_borda))
ranking <- str_replace_all(ranking, ">", "\\\\succ")
ranking <- str_replace_all(ranking, "~", "\\\\sim")
ranking <- paste0("$$", ranking, "$$")
return(ranking)
}
for(line in lines) {
if(str_detect(line, "data")) {
name <- str_remove(line, "\\$data_")
} else {
#ranking <- ranking_to_latex(line)
ranking <- line
results_info <- results_info %>% add_row(name, ranking)
}
}
library(xtable)
print(xtable(results_info, caption = "Results."), include.rownames = FALSE)
sink("latex.txt")
print(xtable(results_info, caption = "Results."), include.rownames = FALSE)
sink()
# Import the necessary libraries
library(clusterlab)
library(tidyverse)
# Some illustrative seeds after a manual exploration
# 1830 With this seed the distance with the worst performance is Euclidean dsitance
# 2456
# 1617
# Set the seed
# the_seed <- 2456
the_seed <- 1002
# Create a dataset of 2 varibles with 5 clustes of three points each
data <- clusterlab(centers = 5, # the number of clusters to simulate
# the number of units of the radius of the circle on which the clusters are generated
r = 2,
# the number of samples in each cluster
numbervec = c(3, 3, 3, 3, 3),
# standard deviation of each cluster
sdvec = c(1, 3, 2, 1, 1),
alphas = c(3, 5, 1, 4, 2),
# the number of features for the data
features = 2,
seed = the_seed, showplots = FALSE)
(points <- as_tibble(t(data$synthetic_data)) %>% rename(x = 1, y = 2))
# Add column with the real cluster
points <- points %>% mutate(cluster = data$identity_matrix$cluster)
# Load the c methods that implements the distances and rkmeans
dyn.load("02.method/distances/distances.so")
dyn.load("02.method/rkmeans/rkmeans.so")
# Clustering with rkmeans
set.seed(the_seed)
out_points <- train_rkmeans(points, 5, iter.max = 5)
errors <- calculate_errors(out_points)
errors <- sorted_errors_by_dataset(errors)
rankingsOfErrors <- lapply(errors, ranking)
rankingsOfErrors <- profile_of_rankings(Reduce(bind_rows, rankingsOfErrors))
rankingsOfErrors_borda <- borda_count(rankingsOfErrors)
errors
errors <- sorted_errors_by_dataset(errors)
# Clustering with rkmeans
set.seed(the_seed)
out_points <- train_rkmeans(points, 5, iter.max = 5)
out_points
errors <- calculate_errors(out_points)
errors
errors <- sorted_errors_by_dataset(errors)
errors
rankingsOfErrors <- lapply(errors, ranking)
errors
# Import the necessary libraries
library(clusterlab)
library(tidyverse)
# Some illustrative seeds after a manual exploration
# 1830 With this seed the distance with the worst performance is Euclidean dsitance
# 2456
# 1617
# Set the seed
# the_seed <- 2456
the_seed <- 1002
# Create a dataset of 2 varibles with 5 clustes of three points each
data <- clusterlab(centers = 5, # the number of clusters to simulate
# the number of units of the radius of the circle on which the clusters are generated
r = 2,
# the number of samples in each cluster
numbervec = c(3, 3, 3, 3, 3),
# standard deviation of each cluster
sdvec = c(1, 3, 2, 1, 1),
alphas = c(3, 5, 1, 4, 2),
# the number of features for the data
features = 2,
seed = the_seed, showplots = FALSE)
(points <- as_tibble(t(data$synthetic_data)) %>% rename(x = 1, y = 2))
# Add column with the real cluster
points <- points %>% mutate(cluster = data$identity_matrix$cluster)
# Load the c methods that implements the distances and rkmeans
dyn.load("02.method/distances/distances.so")
dyn.load("02.method/rkmeans/rkmeans.so")
# Clustering with rkmeans
set.seed(the_seed)
out_points <- train_rkmeans(points, 5, iter.max = 5)
# Clustering with rkmeans
set.seed(the_seed)
out_points <- train_rkmeans(points, 5, iter.max = 10)
errors <- calculate_errors(out_points)
errors <- sorted_errors_by_dataset(errors)
rankingsOfErrors <- lapply(errors, ranking)
errors
library(consensus)
rankingsOfErrors <- lapply(errors, ranking)
rankingsOfErrors
rankingsOfErrors <- profile_of_rankings(Reduce(bind_rows, rankingsOfErrors))
rankingsOfErrors_borda <- borda_count(rankingsOfErrors)
# Import the necessary libraries
library(clusterlab)
library(tidyverse)
# Some illustrative seeds after a manual exploration
# 1830 With this seed the distance with the worst performance is Euclidean dsitance
# 2456
# 1617
# Set the seed
# the_seed <- 2456
the_seed <- 1002
# Create a dataset of 2 varibles with 5 clustes of three points each
data <- clusterlab(centers = 5, # the number of clusters to simulate
# the number of units of the radius of the circle on which the clusters are generated
r = 2,
# the number of samples in each cluster
numbervec = c(3, 3, 3, 3, 3),
# standard deviation of each cluster
sdvec = c(1, 3, 2, 1, 1),
alphas = c(3, 5, 1, 4, 2),
# the number of features for the data
features = 2,
seed = the_seed, showplots = FALSE)
(points <- as_tibble(t(data$synthetic_data)) %>% rename(x = 1, y = 2))
# Add column with the real cluster
points <- points %>% mutate(cluster = data$identity_matrix$cluster)
# Load the c methods that implements the distances and rkmeans
dyn.load("02.method/distances/distances.so")
dyn.load("02.method/rkmeans/rkmeans.so")
# Clustering with rkmeans
set.seed(the_seed)
out_points <- train_rkmeans(points, 5, iter.max = 10)
out_points
errors <- calculate_errors(out_points)
errors
errors <- sorted_errors_by_dataset(errors)
errors
rankingsOfErrors <- lapply(errors, ranking)
errors
errors
ranking
rm(ranking)
rankingsOfErrors <- lapply(errors, ranking)
rankingsOfErrors
rankingsOfErrors <- profile_of_rankings(Reduce(bind_rows, rankingsOfErrors))
rankingsOfErrors_borda <- borda_count(rankingsOfErrors)
rankingsOfErrors_borda
# Clustering with rkmeans
set.seed(the_seed)
out_points <- train_rkmeans(points, 5, iter.max = 10)
errors <- calculate_errors(out_points)
errors <- sorted_errors_by_dataset(errors)
source('~/Desktop/Github/clustering/IPMU-example/example.R', echo=TRUE)
rankingsOfErrors_borda
ranking_to_latex(rankingsOfErrors_borda)
cat(ranking_to_latex(rankingsOfErrors_borda))
